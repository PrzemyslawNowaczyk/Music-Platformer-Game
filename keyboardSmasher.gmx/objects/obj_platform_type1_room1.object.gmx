<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_collidable_dynamic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
start_x = x;
start_y = y;
end_x = x;
end_y = y;
stop_time = 1;
run_time = 1;
shift = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var step = (global.room_controller.song_beats-shift) mod ((stop_time+run_time)*2);

if (step &lt;= stop_time){
    next_x = start_x;
    next_y = start_y;
} 
else
if (step &gt; stop_time &amp;&amp; step &lt;= (stop_time+run_time)){
    next_x = start_x + ((step - stop_time)/run_time) * (end_x-start_x);
    next_y = start_y + ((step - stop_time)/run_time) * (end_y-start_y);
    vertical_distance_per_beat = (end_y-start_y) / run_time;
}
else
if (step &gt; (stop_time+run_time) &amp;&amp; step &lt;= (2*stop_time+run_time)){
    next_x = end_x;
    next_y = end_y;
}
else
if (step &gt; (2*stop_time+run_time)){
    next_x = end_x - ((step - (2*stop_time+run_time))/run_time) * (end_x-start_x);
    next_y = end_y - ((step - (2*stop_time+run_time))/run_time) * (end_y-start_y);
    vertical_distance_per_beat = (start_y-end_y) / run_time;
}

y = next_y;
x = next_x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var v=16; v &lt; sprite_width; v+=32)
{
    for(var h=16; h &lt; sprite_height; h+=32)
    {
        draw_sprite(sprite_index,0,bbox_left+v,bbox_top+h);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
