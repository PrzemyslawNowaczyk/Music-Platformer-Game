<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera_yellow</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_camera_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
followed_object = noone;
max_left_dist = 100;
max_right_dist = 100;
max_up_dist = 100;
max_down_dist = 100;
min_x = 0;
max_x = room_width;
min_y = 0;
max_y = room_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists( followed_object )){
    var horizontal_dist = followed_object.x - x;
    var vertical_dist = followed_object.y - y;
    
    if ( horizontal_dist &gt; max_right_dist){
        x += horizontal_dist - max_right_dist;
    }else{
        if ( horizontal_dist &lt; -max_left_dist){
            x += horizontal_dist + max_left_dist;
        }
    }
    
    if ( vertical_dist &gt; max_down_dist){
        y += vertical_dist - max_down_dist;
    }else{
        if ( vertical_dist &lt; -max_up_dist){
            y += vertical_dist + max_up_dist;
        }
    }
}
else{
    var inst = instance_get_first(obj_hero_controllable);
    if (inst != noone){
        followed_object = inst;
    }
}

view_xview[0] = x - view_wview[0]/2;
view_yview[0] = y - view_hview[0]/2;


if (view_xview[0] &lt; min_x ){
    view_xview[0] = min_x;
}
if (view_xview[0]+view_wview[0] &gt; max_x ){
    view_xview[0] = max_x-view_wview[0];
}
if (view_yview[0] &lt; min_y ){
    view_yview[0] = min_y;
}
if (view_yview[0]+view_hview[0] &gt; max_y ){
    view_yview[0] = max_y-view_hview[0];
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
